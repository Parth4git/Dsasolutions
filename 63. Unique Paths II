//Approach-1 (Recursion + Memo)
//Recursion T.C : O(2^(m*n))
//Memo T.C      : O(m*n)
class Solution {
    Integer t[][]=new Integer[101][101];
    int m, n;
    
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        m = obstacleGrid.length;
        n = obstacleGrid[0].length;
        
        return solve(obstacleGrid, 0, 0);
    }
    int solve(int[][]obstacleGrid, int i, int j){
         if(i < 0 || i >= m || j < 0 || j >= n || obstacleGrid[i][j] != 0) {
            return 0;
        }
        
        if(t[i][j] != null)
            return t[i][j];
        
        if(i == m-1 && j == n-1)
            return 1;
        
        //Why we are not making [i][j] visited ?
        //Because robot can only move down or right so it will never visit any visited cell again
        //int temp = obstacleGrid[i][j];
        //obstacleGrid[i][j] = -1;
        
        int right = solve(obstacleGrid, i, j+1);
        int down  = solve(obstacleGrid, i+1, j);
        
        //obstacleGrid[i][j] = temp;
        
        return t[i][j] = right + down;
    }
}



//Adding Memoization for above code 
class Solution {
    int[][] dp;
    public int uniquePathsWithObstacles(int[][] grid) {
        dp = new int[grid.length][grid[0].length];
        for(int[] d : dp) {
            Arrays.fill(d, -1);
        }
        return dfs(grid, 0, 0);
    }
    
    int dfs(int[][] grid, int row, int col) {
        //Exit condition
        if(row < 0 || col < 0 || row == grid.length || col == grid[0].length || grid[row][col] == 1)
            return 0; 
        if(row == grid.length-1 && col == grid[0].length-1){
            return 1;
        }
        if(dp[row][col] > -1) return dp[row][col];
        dp[row][col] = dfs(grid, row, col+1) +dfs(grid, row+1, col);
        return dp[row][col];
    }
}

//Top Down Approach
class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        if(grid[0][0] == 1) return 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                //First row && first column
                if(i == 0 || j ==0) {
                    //its prev cell was obstacle or if current cell is obstacle
                    if(grid[i][j] == 1 || (i!=0 && grid[i-1][0] == 0) || (j!=0 && grid[i][j-1] == 0)) {
                        grid[i][j] = 0;
                    }
                    else {
                        grid[i][j] = 1;
                    }
                }
                //All the other cells
                else {
                    if(grid[i][j] == 1) {
                        grid[i][j] = 0;
                    }
                    else {
                        grid[i][j] = grid[i-1][j] + grid[i][j-1];
                    }
                }
            }
        }
        return grid[m-1][n-1];
    }
}
